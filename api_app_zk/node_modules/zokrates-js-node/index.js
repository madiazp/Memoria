"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initialize = void 0;

var _utils = require("./utils");

var _stdlib = _interopRequireDefault(require("./stdlib.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const initialize = async () => {
  const EXTENSION_ZOK = '.zok';
  const RESERVED_PATHS = ['ecc/', 'signature/', 'hashes/', 'utils/']; // load web assembly module

  const zokrates = await Promise.resolve().then(() => _interopRequireWildcard(require('./pkg/index.js')));

  const resolveModule = (currentLocation, importLocation, callback) => {
    if (isReserved(currentLocation) || isReserved(importLocation)) {
      return resolveFromStandardLibrary(currentLocation, importLocation);
    }

    return callback(currentLocation, importLocation);
  };

  const isReserved = path => RESERVED_PATHS.some(p => path.startsWith(p));

  const resolveFromStandardLibrary = (currentLocation, importLocation) => {
    let key = (0, _utils.appendExtension)((0, _utils.getAbsolutePath)(currentLocation, importLocation), EXTENSION_ZOK);
    let source = _stdlib.default[key];
    return source ? {
      source,
      location: key
    } : null;
  };

  return {
    compile: (source, location, callback) => {
      let result = zokrates.compile(source, location, (currentLocation, importLocation) => resolveModule(currentLocation, importLocation, callback));
      return {
        program: Array.from(result.program),
        abi: result.abi
      };
    },
    setup: program => {
      let result = zokrates.setup(program);
      return {
        vk: result.vk,
        pk: Array.from(result.pk)
      };
    },
    computeWitness: (artifacts, args) => {
      return zokrates.compute_witness(artifacts, JSON.stringify(Array.from(args)));
    },
    exportSolidityVerifier: (verifyingKey, isAbiv2) => {
      return zokrates.export_solidity_verifier(verifyingKey, isAbiv2);
    },
    generateProof: (program, witness, provingKey) => {
      return zokrates.generate_proof(program, witness, provingKey);
    }
  };
};

exports.initialize = initialize;