{"ast":null,"code":"const HASH = `\nimport \"hashes/pedersen/512bit.zok\" as hash\n\ndef main(private u32[8] preImg, u32[10][8] voteRoll, u32[8] voteCast, u32[8] votingConst, u32[8] nullifier, u32[8] signCast):\n    u32[8] ans = hash([...preImg, ...preImg])\n    bool isIn = 0\n    for field i 0..10 do\n        isIn = isIn || ans == voteRoll[i]\n    endfor\n    assert(isIn)\n\n    u32[8] isNull = hash([...preImg, ...ans])\n    assert(isNull == nullifier)\n\n    u32[8] isVote = hash([...voteCast, ...votingConst])\n    assert(isVote == signCast)\n    return\n`;\nexport default HASH;","map":{"version":3,"sources":["/home/matias/Memoria/Demo/front-zk/app/src/codes/hash.js"],"names":["HASH"],"mappings":"AAAA,MAAMA,IAAI,GAAI;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjBA;AAkBA,eAAeA,IAAf","sourcesContent":["const HASH = `\nimport \"hashes/pedersen/512bit.zok\" as hash\n\ndef main(private u32[8] preImg, u32[10][8] voteRoll, u32[8] voteCast, u32[8] votingConst, u32[8] nullifier, u32[8] signCast):\n    u32[8] ans = hash([...preImg, ...preImg])\n    bool isIn = 0\n    for field i 0..10 do\n        isIn = isIn || ans == voteRoll[i]\n    endfor\n    assert(isIn)\n\n    u32[8] isNull = hash([...preImg, ...ans])\n    assert(isNull == nullifier)\n\n    u32[8] isVote = hash([...voteCast, ...votingConst])\n    assert(isVote == signCast)\n    return\n`;\nexport default HASH;\n"]},"metadata":{},"sourceType":"module"}