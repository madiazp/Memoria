{"ast":null,"code":"import HASH from '../codes/hash';\nimport CONST from '../config/constant';\nimport apicc from '../helpers/apicc';\nimport { initialize } from 'zokrates-js';\n\nconst voting = async (toHash, setter, results, vote) => {\n  console.log(toHash);\n\n  const formatter = w => JSON.parse(w).map(x => '0x' + x.toString(16).padStart(8, \"0\"));\n\n  const hasher = await import('witness');\n  setter(1);\n  const to_witness = hasher.genHash(toHash);\n  setter(2);\n  const to_pub = hasher.genId(toHash);\n  setter(3);\n  const nullifier = hasher.genNullifier(toHash);\n  console.log(JSON.parse(to_witness));\n  const format_witness = formatter(to_witness);\n  const format_pub = formatter(to_pub);\n  const zok = await initialize();\n  setter(4);\n  const systemArtifacts = await apicc.getArtifacts();\n  console.log(systemArtifacts.artifacts);\n  setter(5);\n  const {\n    witness,\n    output\n  } = zok.computeWitness(systemArtifacts.artifacts, [format_witness, format_pub]);\n  setter(6);\n  const keyPair = zok.setup(systemArtifacts.artifacts.program);\n  setter(7);\n  const proof = zok.generateProof(systemArtifacts.artifacts.program, witness, systemArtifacts.keyPairs.pk);\n  setter(8);\n  console.log(proof);\n  console.log(format_witness);\n  results(`witness: [${format_witness}],\\n\n    public: [${format_pub}]\n    proof: ${proof}\n`);\n};\n\nexport default voting;","map":{"version":3,"sources":["/home/matias/Memoria/Demo/front-zk/app/src/utils/voting.js"],"names":["HASH","CONST","apicc","initialize","voting","toHash","setter","results","vote","console","log","formatter","w","JSON","parse","map","x","toString","padStart","hasher","to_witness","genHash","to_pub","genId","nullifier","genNullifier","format_witness","format_pub","zok","systemArtifacts","getArtifacts","artifacts","witness","output","computeWitness","keyPair","setup","program","proof","generateProof","keyPairs","pk"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,eAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA,SAASC,UAAT,QAA2B,aAA3B;;AACA,MAAMC,MAAM,GAAG,OAAOC,MAAP,EAAeC,MAAf,EAAuBC,OAAvB,EAAgCC,IAAhC,KAAyC;AACpDC,EAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;;AACA,QAAMM,SAAS,GAAGC,CAAC,IAAIC,IAAI,CAACC,KAAL,CAAWF,CAAX,EAAcG,GAAd,CAAmBC,CAAD,IAAM,OAAMA,CAAC,CAACC,QAAF,CAAW,EAAX,EAAeC,QAAf,CAAwB,CAAxB,EAA0B,GAA1B,CAA9B,CAAvB;;AACA,QAAMC,MAAM,GAAG,MAAM,OAAO,SAAP,CAArB;AACAb,EAAAA,MAAM,CAAC,CAAD,CAAN;AACA,QAAMc,UAAU,GAAGD,MAAM,CAACE,OAAP,CAAehB,MAAf,CAAnB;AACAC,EAAAA,MAAM,CAAC,CAAD,CAAN;AACA,QAAMgB,MAAM,GAAGH,MAAM,CAACI,KAAP,CAAalB,MAAb,CAAf;AACAC,EAAAA,MAAM,CAAC,CAAD,CAAN;AACA,QAAMkB,SAAS,GAAGL,MAAM,CAACM,YAAP,CAAoBpB,MAApB,CAAlB;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYG,IAAI,CAACC,KAAL,CAAWM,UAAX,CAAZ;AACA,QAAMM,cAAc,GAAGf,SAAS,CAACS,UAAD,CAAhC;AACA,QAAMO,UAAU,GAAGhB,SAAS,CAACW,MAAD,CAA5B;AACA,QAAMM,GAAG,GAAG,MAAMzB,UAAU,EAA5B;AACAG,EAAAA,MAAM,CAAC,CAAD,CAAN;AACA,QAAMuB,eAAe,GAAG,MAAM3B,KAAK,CAAC4B,YAAN,EAA9B;AACArB,EAAAA,OAAO,CAACC,GAAR,CAAYmB,eAAe,CAACE,SAA5B;AACAzB,EAAAA,MAAM,CAAC,CAAD,CAAN;AACA,QAAM;AAAE0B,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAsBL,GAAG,CAACM,cAAJ,CAAmBL,eAAe,CAACE,SAAnC,EAA8C,CAACL,cAAD,EAAiBC,UAAjB,CAA9C,CAA5B;AACArB,EAAAA,MAAM,CAAC,CAAD,CAAN;AACA,QAAM6B,OAAO,GAAGP,GAAG,CAACQ,KAAJ,CAAUP,eAAe,CAACE,SAAhB,CAA0BM,OAApC,CAAhB;AACA/B,EAAAA,MAAM,CAAC,CAAD,CAAN;AACA,QAAMgC,KAAK,GAAGV,GAAG,CAACW,aAAJ,CAAkBV,eAAe,CAACE,SAAhB,CAA0BM,OAA5C,EAAqDL,OAArD,EAA8DH,eAAe,CAACW,QAAhB,CAAyBC,EAAvF,CAAd;AACAnC,EAAAA,MAAM,CAAC,CAAD,CAAN;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY4B,KAAZ;AACA7B,EAAAA,OAAO,CAACC,GAAR,CAAYgB,cAAZ;AACAnB,EAAAA,OAAO,CAAE,aAAYmB,cAAe;AACxC,eAAeC,UAAW;AAC1B,aAAaW,KAAM;AACnB,CAHW,CAAP;AAIH,CA9BD;;AAgCA,eAAelC,MAAf","sourcesContent":["import HASH from '../codes/hash';\nimport CONST from '../config/constant';\nimport apicc from '../helpers/apicc';\n\nimport { initialize } from 'zokrates-js';\nconst voting = async (toHash, setter, results, vote) => {\n    console.log(toHash);\n    const formatter = w => JSON.parse(w).map((x) =>'0x'+ x.toString(16).padStart(8,\"0\"));\n    const hasher = await import('witness');\n    setter(1);\n    const to_witness = hasher.genHash(toHash);\n    setter(2);\n    const to_pub = hasher.genId(toHash);\n    setter(3);\n    const nullifier = hasher.genNullifier(toHash);\n    console.log(JSON.parse(to_witness));\n    const format_witness = formatter(to_witness);\n    const format_pub = formatter(to_pub);\n    const zok = await initialize();\n    setter(4);\n    const systemArtifacts = await apicc.getArtifacts();\n    console.log(systemArtifacts.artifacts);\n    setter(5);\n    const { witness, output } = zok.computeWitness(systemArtifacts.artifacts, [format_witness, format_pub]);\n    setter(6);\n    const keyPair = zok.setup(systemArtifacts.artifacts.program);\n    setter(7);\n    const proof = zok.generateProof(systemArtifacts.artifacts.program, witness, systemArtifacts.keyPairs.pk);\n    setter(8);\n    console.log(proof);\n    console.log(format_witness);\n    results(`witness: [${format_witness}],\\n\n    public: [${format_pub}]\n    proof: ${proof}\n`);\n}\n\nexport default voting;\n"]},"metadata":{},"sourceType":"module"}