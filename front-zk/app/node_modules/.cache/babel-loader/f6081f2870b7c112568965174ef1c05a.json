{"ast":null,"code":"import HASH from '../codes/hash';\nimport CONST from '../config/constant';\nimport apicc from '../helpers/apicc';\nimport format from '../helpers/format';\nimport { initialize } from 'zokrates-js';\n\nconst voting = async (toHash, setter, results, vote) => {\n  console.log(toHash);\n  const hasher = await import('witness');\n  setter(1);\n  const to_witness = hasher.genHash(toHash);\n  const vote_hash = hasher.genHash(vote);\n  const nullifier = hasher.genNullifier(toHash);\n  const format_witness = format.toZokFormat8(to_witness);\n  const format_vote = format.toZokFormat8(vote_hash);\n  const format_nullifier = format.toZokFormat8(nullifier);\n  setter(2);\n  const zok = await initialize();\n  setter(3);\n  const systemArtifacts = await apicc.getArtifacts();\n  setter(4);\n  const vote_sign = hasher.voteSign(vote, systemArtifacts.voteConst.value);\n  const format_sign = format.toZokFormat8(vote_sign);\n  const {\n    witness,\n    output\n  } = zok.computeWitness(systemArtifacts.artifacts, [format_witness, systemArtifacts.voteRoll, format_vote, systemArtifacts.voteConst.hash, format_nullifier, format_sign]);\n  setter(5);\n  console.log(output);\n  const proof = zok.generateProof(systemArtifacts.artifacts.program, witness, systemArtifacts.keyPairs.pk);\n  setter(6);\n  console.log(proof);\n  console.log(format_sign);\n  results(` proof: ${JSON.stringify(proof)}`);\n};\n\nexport default voting;","map":{"version":3,"sources":["/home/matias/Memoria/Demo/front-zk/app/src/utils/voting.js"],"names":["HASH","CONST","apicc","format","initialize","voting","toHash","setter","results","vote","console","log","hasher","to_witness","genHash","vote_hash","nullifier","genNullifier","format_witness","toZokFormat8","format_vote","format_nullifier","zok","systemArtifacts","getArtifacts","vote_sign","voteSign","voteConst","value","format_sign","witness","output","computeWitness","artifacts","voteRoll","hash","proof","generateProof","program","keyPairs","pk","JSON","stringify"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,eAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,UAAT,QAA2B,aAA3B;;AAEA,MAAMC,MAAM,GAAG,OAAOC,MAAP,EAAeC,MAAf,EAAuBC,OAAvB,EAAgCC,IAAhC,KAAyC;AACpDC,EAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACA,QAAMM,MAAM,GAAG,MAAM,OAAO,SAAP,CAArB;AACAL,EAAAA,MAAM,CAAC,CAAD,CAAN;AACA,QAAMM,UAAU,GAAGD,MAAM,CAACE,OAAP,CAAeR,MAAf,CAAnB;AACA,QAAMS,SAAS,GAAGH,MAAM,CAACE,OAAP,CAAeL,IAAf,CAAlB;AACA,QAAMO,SAAS,GAAGJ,MAAM,CAACK,YAAP,CAAoBX,MAApB,CAAlB;AACA,QAAMY,cAAc,GAAGf,MAAM,CAACgB,YAAP,CAAoBN,UAApB,CAAvB;AACA,QAAMO,WAAW,GAAGjB,MAAM,CAACgB,YAAP,CAAoBJ,SAApB,CAApB;AACA,QAAMM,gBAAgB,GAAGlB,MAAM,CAACgB,YAAP,CAAoBH,SAApB,CAAzB;AACAT,EAAAA,MAAM,CAAC,CAAD,CAAN;AACA,QAAMe,GAAG,GAAG,MAAMlB,UAAU,EAA5B;AACAG,EAAAA,MAAM,CAAC,CAAD,CAAN;AACA,QAAMgB,eAAe,GAAG,MAAMrB,KAAK,CAACsB,YAAN,EAA9B;AACAjB,EAAAA,MAAM,CAAC,CAAD,CAAN;AACA,QAAMkB,SAAS,GAAGb,MAAM,CAACc,QAAP,CAAgBjB,IAAhB,EAAsBc,eAAe,CAACI,SAAhB,CAA0BC,KAAhD,CAAlB;AACA,QAAMC,WAAW,GAAG1B,MAAM,CAACgB,YAAP,CAAoBM,SAApB,CAApB;AACA,QAAM;AAAEK,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAsBT,GAAG,CAACU,cAAJ,CAAmBT,eAAe,CAACU,SAAnC,EACxB,CACIf,cADJ,EAEIK,eAAe,CAACW,QAFpB,EAGId,WAHJ,EAIIG,eAAe,CAACI,SAAhB,CAA0BQ,IAJ9B,EAKId,gBALJ,EAMIQ,WANJ,CADwB,CAA5B;AAUAtB,EAAAA,MAAM,CAAC,CAAD,CAAN;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYoB,MAAZ;AACA,QAAMK,KAAK,GAAGd,GAAG,CAACe,aAAJ,CAAkBd,eAAe,CAACU,SAAhB,CAA0BK,OAA5C,EAAqDR,OAArD,EAA8DP,eAAe,CAACgB,QAAhB,CAAyBC,EAAvF,CAAd;AACAjC,EAAAA,MAAM,CAAC,CAAD,CAAN;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYyB,KAAZ;AACA1B,EAAAA,OAAO,CAACC,GAAR,CAAYkB,WAAZ;AACArB,EAAAA,OAAO,CAAE,WAAUiC,IAAI,CAACC,SAAL,CAAeN,KAAf,CAAsB,EAAlC,CAAP;AACH,CAlCD;;AAoCA,eAAe/B,MAAf","sourcesContent":["import HASH from '../codes/hash';\nimport CONST from '../config/constant';\nimport apicc from '../helpers/apicc';\nimport format from '../helpers/format';\nimport { initialize } from 'zokrates-js';\n\nconst voting = async (toHash, setter, results, vote) => {\n    console.log(toHash);\n    const hasher = await import('witness');\n    setter(1);\n    const to_witness = hasher.genHash(toHash);\n    const vote_hash = hasher.genHash(vote);\n    const nullifier = hasher.genNullifier(toHash);\n    const format_witness = format.toZokFormat8(to_witness);\n    const format_vote = format.toZokFormat8(vote_hash);\n    const format_nullifier = format.toZokFormat8(nullifier);\n    setter(2);\n    const zok = await initialize();\n    setter(3);\n    const systemArtifacts = await apicc.getArtifacts();\n    setter(4);\n    const vote_sign = hasher.voteSign(vote, systemArtifacts.voteConst.value);\n    const format_sign = format.toZokFormat8(vote_sign);\n    const { witness, output } = zok.computeWitness(systemArtifacts.artifacts,\n        [\n            format_witness,\n            systemArtifacts.voteRoll,\n            format_vote,\n            systemArtifacts.voteConst.hash,\n            format_nullifier,\n            format_sign,\n        ],\n    );\n    setter(5);\n    console.log(output);\n    const proof = zok.generateProof(systemArtifacts.artifacts.program, witness, systemArtifacts.keyPairs.pk);\n    setter(6);\n    console.log(proof);\n    console.log(format_sign);\n    results(` proof: ${JSON.stringify(proof)}`);\n}\n\nexport default voting;\n"]},"metadata":{},"sourceType":"module"}