{"ast":null,"code":"import HASH from '../codes/hash';\nimport CONST from '../config/constant';\nimport apicc from '../helpers/apicc';\nimport { initialize } from 'zokrates-js';\n\nconst voting = async (toHash, setter, results) => {\n  console.log(toHash);\n\n  const formatter = w => JSON.parse(w).map(x => '0x' + x.toString(16).padStart(8, \"0\"));\n\n  const hasher = await import('witness');\n  setter(1);\n  const to_witness = hasher.genHash(toHash);\n  setter(2);\n  const to_pub = hasher.genId(toHash);\n  setter(3);\n  console.log(JSON.parse(to_witness));\n  const format_witness = formatter(to_witness);\n  const format_pub = formatter(to_pub);\n  const zok = await initialize();\n  setter(4);\n  const artifacts = await apicc.getArtifacts();\n  console.log(artifacts);\n  setter(5);\n  const {\n    witness,\n    output\n  } = zok.computeWitness(artifacts, [format_witness, format_pub]);\n  setter(6);\n  const keyPair = zok.setup(artifacts.program);\n  setter(7);\n  const proof = zok.generateProof(artifacts.program, witness, keyPair.pk);\n  setter(8);\n  console.log(proof);\n  console.log(format_witness);\n  results(`witness: [${format_witness}],\\n\n    public: [${format_pub}]\n    proof: ${proof}\n`);\n};\n\nexport default voting;","map":{"version":3,"sources":["/home/matias/Memoria/Demo/front-zk/app/src/utils/voting.js"],"names":["HASH","CONST","apicc","initialize","voting","toHash","setter","results","console","log","formatter","w","JSON","parse","map","x","toString","padStart","hasher","to_witness","genHash","to_pub","genId","format_witness","format_pub","zok","artifacts","getArtifacts","witness","output","computeWitness","keyPair","setup","program","proof","generateProof","pk"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,eAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA,SAASC,UAAT,QAA2B,aAA3B;;AACA,MAAMC,MAAM,GAAG,OAAOC,MAAP,EAAeC,MAAf,EAAuBC,OAAvB,KAAmC;AAC9CC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;;AACA,QAAMK,SAAS,GAAGC,CAAC,IAAIC,IAAI,CAACC,KAAL,CAAWF,CAAX,EAAcG,GAAd,CAAmBC,CAAD,IAAM,OAAMA,CAAC,CAACC,QAAF,CAAW,EAAX,EAAeC,QAAf,CAAwB,CAAxB,EAA0B,GAA1B,CAA9B,CAAvB;;AACA,QAAMC,MAAM,GAAG,MAAM,OAAO,SAAP,CAArB;AACAZ,EAAAA,MAAM,CAAC,CAAD,CAAN;AACA,QAAMa,UAAU,GAAGD,MAAM,CAACE,OAAP,CAAef,MAAf,CAAnB;AACAC,EAAAA,MAAM,CAAC,CAAD,CAAN;AACA,QAAMe,MAAM,GAAGH,MAAM,CAACI,KAAP,CAAajB,MAAb,CAAf;AACAC,EAAAA,MAAM,CAAC,CAAD,CAAN;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYG,IAAI,CAACC,KAAL,CAAWM,UAAX,CAAZ;AACA,QAAMI,cAAc,GAAGb,SAAS,CAACS,UAAD,CAAhC;AACA,QAAMK,UAAU,GAAGd,SAAS,CAACW,MAAD,CAA5B;AACA,QAAMI,GAAG,GAAG,MAAMtB,UAAU,EAA5B;AACAG,EAAAA,MAAM,CAAC,CAAD,CAAN;AACA,QAAMoB,SAAS,GAAG,MAAMxB,KAAK,CAACyB,YAAN,EAAxB;AACAnB,EAAAA,OAAO,CAACC,GAAR,CAAYiB,SAAZ;AACApB,EAAAA,MAAM,CAAC,CAAD,CAAN;AACA,QAAM;AAAEsB,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAsBJ,GAAG,CAACK,cAAJ,CAAmBJ,SAAnB,EAA8B,CAACH,cAAD,EAAiBC,UAAjB,CAA9B,CAA5B;AACAlB,EAAAA,MAAM,CAAC,CAAD,CAAN;AACA,QAAMyB,OAAO,GAAGN,GAAG,CAACO,KAAJ,CAAUN,SAAS,CAACO,OAApB,CAAhB;AACA3B,EAAAA,MAAM,CAAC,CAAD,CAAN;AACA,QAAM4B,KAAK,GAAGT,GAAG,CAACU,aAAJ,CAAkBT,SAAS,CAACO,OAA5B,EAAqCL,OAArC,EAA8CG,OAAO,CAACK,EAAtD,CAAd;AACA9B,EAAAA,MAAM,CAAC,CAAD,CAAN;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYyB,KAAZ;AACA1B,EAAAA,OAAO,CAACC,GAAR,CAAYc,cAAZ;AACAhB,EAAAA,OAAO,CAAE,aAAYgB,cAAe;AACxC,eAAeC,UAAW;AAC1B,aAAaU,KAAM;AACnB,CAHW,CAAP;AAIH,CA7BD;;AA+BA,eAAe9B,MAAf","sourcesContent":["import HASH from '../codes/hash';\nimport CONST from '../config/constant';\nimport apicc from '../helpers/apicc';\n\nimport { initialize } from 'zokrates-js';\nconst voting = async (toHash, setter, results) => {\n    console.log(toHash);\n    const formatter = w => JSON.parse(w).map((x) =>'0x'+ x.toString(16).padStart(8,\"0\"));\n    const hasher = await import('witness');\n    setter(1);\n    const to_witness = hasher.genHash(toHash);\n    setter(2);\n    const to_pub = hasher.genId(toHash);\n    setter(3);\n    console.log(JSON.parse(to_witness));\n    const format_witness = formatter(to_witness);\n    const format_pub = formatter(to_pub);\n    const zok = await initialize();\n    setter(4);\n    const artifacts = await apicc.getArtifacts();\n    console.log(artifacts);\n    setter(5);\n    const { witness, output } = zok.computeWitness(artifacts, [format_witness, format_pub]);\n    setter(6);\n    const keyPair = zok.setup(artifacts.program);\n    setter(7);\n    const proof = zok.generateProof(artifacts.program, witness, keyPair.pk);\n    setter(8);\n    console.log(proof);\n    console.log(format_witness);\n    results(`witness: [${format_witness}],\\n\n    public: [${format_pub}]\n    proof: ${proof}\n`);\n}\n\nexport default voting;\n"]},"metadata":{},"sourceType":"module"}