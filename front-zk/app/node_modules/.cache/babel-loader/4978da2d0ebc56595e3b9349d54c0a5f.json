{"ast":null,"code":"import * as wasm from './witness_bg.wasm';\nlet WASM_VECTOR_LEN = 0;\nlet cachegetUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n  if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n    cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8Memory0;\n}\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\nlet cachedTextEncoder = new lTextEncoder('utf-8');\nconst encodeString = typeof cachedTextEncoder.encodeInto === 'function' ? function (arg, view) {\n  return cachedTextEncoder.encodeInto(arg, view);\n} : function (arg, view) {\n  const buf = cachedTextEncoder.encode(arg);\n  view.set(buf);\n  return {\n    read: arg.length,\n    written: buf.length\n  };\n};\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n  if (realloc === undefined) {\n    const buf = cachedTextEncoder.encode(arg);\n    const ptr = malloc(buf.length);\n    getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n    WASM_VECTOR_LEN = buf.length;\n    return ptr;\n  }\n\n  let len = arg.length;\n  let ptr = malloc(len);\n  const mem = getUint8Memory0();\n  let offset = 0;\n\n  for (; offset < len; offset++) {\n    const code = arg.charCodeAt(offset);\n    if (code > 0x7F) break;\n    mem[ptr + offset] = code;\n  }\n\n  if (offset !== len) {\n    if (offset !== 0) {\n      arg = arg.slice(offset);\n    }\n\n    ptr = realloc(ptr, len, len = offset + arg.length * 3);\n    const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n    const ret = encodeString(arg, view);\n    offset += ret.written;\n  }\n\n  WASM_VECTOR_LEN = offset;\n  return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n  if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n    cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n  }\n\n  return cachegetInt32Memory0;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\nlet cachedTextDecoder = new lTextDecoder('utf-8', {\n  ignoreBOM: true,\n  fatal: true\n});\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n/**\n* @param {string} premImg\n* @returns {string}\n*/\n\n\nexport function genHash(premImg) {\n  try {\n    const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n    var ptr0 = passStringToWasm0(premImg, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.genHash(retptr, ptr0, len0);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    return getStringFromWasm0(r0, r1);\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n\n    wasm.__wbindgen_free(r0, r1);\n  }\n}","map":{"version":3,"sources":["/home/matias/Memoria/Demo/front-zk/wasm-build/witness_bg.js"],"names":["wasm","WASM_VECTOR_LEN","cachegetUint8Memory0","getUint8Memory0","buffer","memory","Uint8Array","lTextEncoder","TextEncoder","module","require","cachedTextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","length","written","passStringToWasm0","malloc","realloc","undefined","ptr","subarray","len","mem","offset","code","charCodeAt","slice","ret","cachegetInt32Memory0","getInt32Memory0","Int32Array","lTextDecoder","TextDecoder","cachedTextDecoder","ignoreBOM","fatal","decode","getStringFromWasm0","genHash","premImg","retptr","__wbindgen_add_to_stack_pointer","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","r0","r1","__wbindgen_free"],"mappings":"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","sourcesContent":["import * as wasm from './witness_bg.wasm';\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n/**\n* @param {string} premImg\n* @returns {string}\n*/\nexport function genHash(premImg) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passStringToWasm0(premImg, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.genHash(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}