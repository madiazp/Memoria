{"ast":null,"code":"import HASH from '../codes/hash';\nimport CONST from '../config/constant';\nimport apicc from '../helpers/apicc';\nimport { initialize } from 'zokrates-js';\n\nconst voting = async (toHash, setter, results, vote) => {\n  console.log(toHash);\n\n  const formatter = w => JSON.parse(w).map(x => '0x' + x.toString(16).padStart(8, \"0\"));\n\n  const hasher = await import('witness');\n  setter(1);\n  const to_witness = hasher.genHash(toHash);\n  const vote_hash = hasher.genHash(vote);\n  const nullifier = hasher.genNullifier(toHash);\n  const format_witness = formatter(to_witness);\n  const format_vote = formatter(vote_hash);\n  const format_nullifier = formatter(nullifier);\n  setter(2);\n  const zok = await initialize();\n  setter(3);\n  const systemArtifacts = await apicc.getArtifacts();\n  setter(4);\n  const vote_sign = hasher.voteSign(vote, systemArtifacts.voteConst.value);\n  const format_sign = formatter(vote_sign);\n  const {\n    witness\n  } = zok.computeWitness(systemArtifacts.artifacts, [format_witness, systemArtifacts.voteRoll, format_vote, systemArtifacts.voteConst.hash, format_nullifier, format_sign]);\n  setter(5);\n  console.log(witness);\n  const proof = zok.generateProof(systemArtifacts.artifacts.program, witness, systemArtifacts.keyPairs.pk);\n  setter(6);\n  console.log(proof);\n  console.log(format_witness);\n  results(` proof: ${JSON.stringify(proof)}`);\n};\n\nexport default voting;","map":{"version":3,"sources":["/home/matias/Memoria/Demo/front-zk/app/src/utils/voting.js"],"names":["HASH","CONST","apicc","initialize","voting","toHash","setter","results","vote","console","log","formatter","w","JSON","parse","map","x","toString","padStart","hasher","to_witness","genHash","vote_hash","nullifier","genNullifier","format_witness","format_vote","format_nullifier","zok","systemArtifacts","getArtifacts","vote_sign","voteSign","voteConst","value","format_sign","witness","computeWitness","artifacts","voteRoll","hash","proof","generateProof","program","keyPairs","pk","stringify"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,eAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA,SAASC,UAAT,QAA2B,aAA3B;;AACA,MAAMC,MAAM,GAAG,OAAOC,MAAP,EAAeC,MAAf,EAAuBC,OAAvB,EAAgCC,IAAhC,KAAyC;AACpDC,EAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;;AACA,QAAMM,SAAS,GAAGC,CAAC,IAAIC,IAAI,CAACC,KAAL,CAAWF,CAAX,EAAcG,GAAd,CAAmBC,CAAD,IAAM,OAAMA,CAAC,CAACC,QAAF,CAAW,EAAX,EAAeC,QAAf,CAAwB,CAAxB,EAA0B,GAA1B,CAA9B,CAAvB;;AACA,QAAMC,MAAM,GAAG,MAAM,OAAO,SAAP,CAArB;AACAb,EAAAA,MAAM,CAAC,CAAD,CAAN;AACA,QAAMc,UAAU,GAAGD,MAAM,CAACE,OAAP,CAAehB,MAAf,CAAnB;AACA,QAAMiB,SAAS,GAAGH,MAAM,CAACE,OAAP,CAAeb,IAAf,CAAlB;AACA,QAAMe,SAAS,GAAGJ,MAAM,CAACK,YAAP,CAAoBnB,MAApB,CAAlB;AACA,QAAMoB,cAAc,GAAGd,SAAS,CAACS,UAAD,CAAhC;AACA,QAAMM,WAAW,GAAGf,SAAS,CAACW,SAAD,CAA7B;AACA,QAAMK,gBAAgB,GAAGhB,SAAS,CAACY,SAAD,CAAlC;AACAjB,EAAAA,MAAM,CAAC,CAAD,CAAN;AACA,QAAMsB,GAAG,GAAG,MAAMzB,UAAU,EAA5B;AACAG,EAAAA,MAAM,CAAC,CAAD,CAAN;AACA,QAAMuB,eAAe,GAAG,MAAM3B,KAAK,CAAC4B,YAAN,EAA9B;AACAxB,EAAAA,MAAM,CAAC,CAAD,CAAN;AACA,QAAMyB,SAAS,GAAGZ,MAAM,CAACa,QAAP,CAAgBxB,IAAhB,EAAsBqB,eAAe,CAACI,SAAhB,CAA0BC,KAAhD,CAAlB;AACA,QAAMC,WAAW,GAAGxB,SAAS,CAACoB,SAAD,CAA7B;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAcR,GAAG,CAACS,cAAJ,CAAmBR,eAAe,CAACS,SAAnC,EAChB,CACIb,cADJ,EAEII,eAAe,CAACU,QAFpB,EAGIb,WAHJ,EAIIG,eAAe,CAACI,SAAhB,CAA0BO,IAJ9B,EAKIb,gBALJ,EAMIQ,WANJ,CADgB,CAApB;AAUA7B,EAAAA,MAAM,CAAC,CAAD,CAAN;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY0B,OAAZ;AACA,QAAMK,KAAK,GAAGb,GAAG,CAACc,aAAJ,CAAkBb,eAAe,CAACS,SAAhB,CAA0BK,OAA5C,EAAqDP,OAArD,EAA8DP,eAAe,CAACe,QAAhB,CAAyBC,EAAvF,CAAd;AACAvC,EAAAA,MAAM,CAAC,CAAD,CAAN;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY+B,KAAZ;AACAhC,EAAAA,OAAO,CAACC,GAAR,CAAYe,cAAZ;AACAlB,EAAAA,OAAO,CAAE,WAAUM,IAAI,CAACiC,SAAL,CAAeL,KAAf,CAAsB,EAAlC,CAAP;AACH,CAnCD;;AAqCA,eAAerC,MAAf","sourcesContent":["import HASH from '../codes/hash';\nimport CONST from '../config/constant';\nimport apicc from '../helpers/apicc';\n\nimport { initialize } from 'zokrates-js';\nconst voting = async (toHash, setter, results, vote) => {\n    console.log(toHash);\n    const formatter = w => JSON.parse(w).map((x) =>'0x'+ x.toString(16).padStart(8,\"0\"));\n    const hasher = await import('witness');\n    setter(1);\n    const to_witness = hasher.genHash(toHash);\n    const vote_hash = hasher.genHash(vote);\n    const nullifier = hasher.genNullifier(toHash);\n    const format_witness = formatter(to_witness);\n    const format_vote = formatter(vote_hash);\n    const format_nullifier = formatter(nullifier);\n    setter(2);\n    const zok = await initialize();\n    setter(3);\n    const systemArtifacts = await apicc.getArtifacts();\n    setter(4);\n    const vote_sign = hasher.voteSign(vote, systemArtifacts.voteConst.value);\n    const format_sign = formatter(vote_sign);\n    const { witness } = zok.computeWitness(systemArtifacts.artifacts,\n        [\n            format_witness,\n            systemArtifacts.voteRoll,\n            format_vote,\n            systemArtifacts.voteConst.hash,\n            format_nullifier,\n            format_sign,\n        ],\n    );\n    setter(5);\n    console.log(witness);\n    const proof = zok.generateProof(systemArtifacts.artifacts.program, witness, systemArtifacts.keyPairs.pk);\n    setter(6);\n    console.log(proof);\n    console.log(format_witness);\n    results(` proof: ${JSON.stringify(proof)}`);\n}\n\nexport default voting;\n"]},"metadata":{},"sourceType":"module"}